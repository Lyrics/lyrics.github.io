<!doctype html><link rel="stylesheet" href="g.css"><meta charset="utf-8"><meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1"><title>Search</title><meta name="description" content="Find lyrics using GitHub’s code search engine"><meta name="google" content="notranslate"><form action=""><nav><a href=".">Lyrics</a> <a href="db/A/">A</a> <a href="db/B/">B</a> <a href="db/C/">C</a> <a href="db/D/">D</a> <a href="db/E/">E</a> <a href="db/F/">F</a> <a href="db/G/">G</a> <a href="db/H/">H</a> <a href="db/I/">I</a> <a href="db/J/">J</a> <a href="db/K/">K</a> <a href="db/L/">L</a> <a href="db/M/">M</a> <a href="db/N/">N</a> <a href="db/O/">O</a> <a href="db/P/">P</a> <a href="db/Q/">Q</a> <a href="db/R/">R</a> <a href="db/S/">S</a> <a href="db/T/">T</a> <a href="db/U/">U</a> <a href="db/V/">V</a> <a href="db/W/">W</a> <a href="db/X/">X</a> <a href="db/Y/">Y</a> <a href="db/Z/">Z</a> </nav></form><div id="content" class="search"><br><div id="b" vocab="https://schema.org/" typeof="BreadcrumbList"><span property="itemListElement" typeof="ListItem"><a property="item" typeof="WebPage" href=".."><span property="name">Home</span></a><meta property="position" content="0"></span> — <span property="itemListElement" typeof="ListItem"><a property="item" typeof="WebPage" href="/s.htm"><span property="name">Search</span></a><meta property="position" content="0"></span></div><br><div id="view"><noscript><p>Sadly, but the search has to rely on JavaScript in order to function inside the browser.</p><p>Please feel free to <a href="https://github.com/Lyrics/lyrics-database/archive/master.zip">download the database</a> or clone git repository git@github.com:Lyrics/lyrics-database.git, in case you’d like to search through it locally.</p></noscript><script>/* Remove the above NOSCRIPT DOM element */const noscriptNode = document.getElementsByTagName("noscript")[0];noscriptNode.parentNode.removeChild(noscriptNode);/* Remove this very SCRIPT DOM element */const scriptNode = document.getElementsByTagName("script")[0];scriptNode.parentNode.removeChild(scriptNode)</script><div id="app"></div><script>const appNode = document.getElementById("app");const dBWebsitePrefix = "db";function formatURL(input) {input = encodeURI(input).replace(/\?/g, "%3F");return dBWebsitePrefix + "/" + input + "/";}function getQueryVariable(variableName) {const params = new URLSearchParams(window.location.search);return params.get(variableName);}function reset() {appNode.innerHTML = "";}function displayLoading() {reset();const loadingNode = document.createElement("div");loadingNode.className = "loading";loadingNode.innerText = "Loading…";appNode.appendChild(loadingNode);}function displayError(reason) {reset();const errorNode = document.createElement("div");errorNode.className = "error";errorNode.innerText = reason;appNode.appendChild(errorNode);}function displayResults(items) {reset();const contentNode = document.createElement("div");contentNode.className = "content";if (items.length > 0) {var listNode = document.createElement("ul");listNode.className = "l";for (let i = 0; i < items.length; i++) {const item = items[i];const listItemNode = document.createElement("li");const listItemAnchorNode = document.createElement("a");listItemAnchorNode.className = "t4";listItemAnchorNode.innerText = item.split("/")[1] + " – " + item.split("/")[3];listItemAnchorNode.href = formatURL(item);listItemNode.appendChild(listItemAnchorNode);listNode.appendChild(listItemNode);}contentNode.appendChild(listNode);} else {const noResultsNode = document.createElement("p");noResultsNode.innerText = "No results";contentNode.appendChild(noResultsNode);}appNode.appendChild(contentNode);}function makeHttpRequest(url) {return new Promise((resolve, reject) => {const xhr = new XMLHttpRequest();xhr.onreadystatechange = processHttpResponse;xhr.open("GET", url);xhr.send();function processHttpResponse() {if (xhr.readyState === XMLHttpRequest.DONE) {if (xhr.status == 200) {resolve(JSON.parse(xhr.responseText));} else {reject();}}}});}const queryString = (getQueryVariable("q") || "").trim();/* Need to wait for the search field to be added to the DOM tree (one tick) */setTimeout(() => document.forms[0].firstChild.lastChild.value = queryString);/* Proceed to retrieving results from the server */try {if (queryString.length > 0) {/* Put the loading indicator up */displayLoading();var matches = queryString.toLowerCase();/* Replace useless and dangerous characters with spaces */"`~!@#$%^&*()-_=+[]{}\\|;:'\",.<>/?…’“”".split("").forEach(c => {matches = matches.replace(c, " ");});/* Split and remove empty strings */matches = matches.split(" ").filter(m => m.length > 0);/* Dedupe */matches = [...new Set(matches)];/* Array of first letters/numbers/symbols; e.g.: ["h", "l"] */const obtainedKeywordGroups = [];/* Object of all keyword & indexes; e.g.: { hate: [620, 9850], love: [620] } */const keywords = {};/* Array of filesystem paths, each item is referred to by its index */let pathsIndexes = [];function finalStage() {if (pathsIndexes.length > 0) {/* Finally, we retrieve the file that contains array of paths */makeHttpRequest("s.json").then(pathsArray => displayResults(pathsIndexes.map(pi => pathsArray[pi])));} else {displayResults([]);}}function makeMatchRequest(matches) {const match = matches.shift();const matchFirstSymbol = match[0];if (obtainedKeywordGroups.includes(matchFirstSymbol)) {if (match in keywords) {/* Discard previously found paths that don’t intersect with newly discovered paths */if (pathsIndexes.length === 0) {pathsIndexes = keywords[match];} else {pathsIndexes = keywords[match].filter(existingPathIndex => pathsIndexes.includes(existingPathIndex));}/* Dedupe */pathsIndexes = [...new Set(pathsIndexes)];} else {/* Keyword not found */pathsIndexes = [];}if (pathsIndexes.length === 0 || matches.length === 0) {finalStage();} else {makeMatchRequest(matches);}} else {makeHttpRequest("s/" + matchFirstSymbol + ".json").then(newKeywords => {for (newKeyword in newKeywords) {keywords[newKeyword] = newKeywords[newKeyword];}obtainedKeywordGroups.push(matchFirstSymbol);if (match in keywords) {/* Discard previously found paths that don’t intersect with newly discovered paths */if (pathsIndexes.length === 0) {pathsIndexes = keywords[match];} else {pathsIndexes = keywords[match].filter(existingPathIndex => pathsIndexes.includes(existingPathIndex));}/* Dedupe */pathsIndexes = [...new Set(pathsIndexes)];} else {/* Keyword not found */pathsIndexes = [];}if (pathsIndexes.length === 0 || matches.length === 0) {finalStage();} else {makeMatchRequest(matches);}}).catch(() => {throw new Error("something went wrong");});}}makeMatchRequest(matches);} else {throw new Error("query can’t be empty");}} catch(error) {displayError(error);}</script></div></div><script>const i=document.createElement("input");i.name="q";i.type="search";i.placeholder="Search";document.forms[0].firstChild.appendChild(i)</script>